// Generated by CoffeeScript 1.3.3
(function() {
  var GameOfLife;

  GameOfLife = (function() {

    function GameOfLife() {
      var x, y;
      this.SIZE = 80;
      this.CELL_SIZE = 10;
      this.WIDTH = this.SIZE * this.CELL_SIZE;
      this.HEIGHT = this.WIDTH;
      this.cells = (function() {
        var _i, _ref, _results;
        _results = [];
        for (x = _i = 0, _ref = this.SIZE; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (y = _j = 0, _ref1 = this.SIZE; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
              if (Math.random() < 0.9) {
                _results1.push(false);
              } else {
                _results1.push(true);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.ctx = document.getElementById("life").getContext('2d');
      this.drawGridLines();
      this.plot();
    }

    GameOfLife.prototype.drawGridLines = function() {
      var i, offset, _i, _ref;
      this.ctx.strokeStyle = "#333";
      this.ctx.lineWidth = 2;
      for (i = _i = 0, _ref = this.SIZE; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        offset = i * this.CELL_SIZE;
        this.ctx.moveTo(offset, 0);
        this.ctx.lineTo(offset, this.HEIGHT);
        this.ctx.moveTo(0, offset);
        this.ctx.lineTo(this.WIDTH, offset);
      }
      return this.ctx.stroke();
    };

    GameOfLife.prototype.plot = function() {
      var i, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.SIZE; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.SIZE; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            this.ctx.fillStyle = this.cells[i][j] === true ? "black" : "white";
            _results1.push(this.ctx.fillRect(i * this.CELL_SIZE + 1, j * this.CELL_SIZE + 1, this.CELL_SIZE - 2, this.CELL_SIZE - 2));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.plot2 = function() {
      var i, j, _i, _ref, _results;
      this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);
      this.ctx.fillStyle = "white";
      this.ctx.fillRect(0, 0, this.WIDTH, this.HEIGHT);
      this.drawGridLines();
      this.ctx.fillStyle = "black";
      _results = [];
      for (i = _i = 0, _ref = this.SIZE; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.SIZE; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            if (this.cells[i][j] === true) {
              _results1.push(this.ctx.fillRect(i * this.CELL_SIZE + 1, j * this.CELL_SIZE + 1, this.CELL_SIZE - 2, this.CELL_SIZE - 2));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.iterate = function() {
      var i, j, size, _i, _j;
      size = this.SIZE;
      for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
        for (j = _j = 0; 0 <= size ? _j < size : _j > size; j = 0 <= size ? ++_j : --_j) {
          this.cells[i][j] = (this.cells[i][j] && this.neighborCount(i, j, size) === 2) || this.neighborCount(i, j, size) === 3;
        }
      }
      return this.plot();
    };

    GameOfLife.prototype.neighborCount = function(x, y, size) {
      var nc;
      nc = 0;
      if (this.cells[(x + 1) % size][y]) {
        nc++;
      }
      if (this.cells[(x + 1) % size][(y + 1) % size]) {
        nc++;
      }
      if (this.cells[x][(y + 1) % size]) {
        nc++;
      }
      if (this.cells[x][(((y - 1) % size) + size) % size]) {
        nc++;
      }
      if (this.cells[(x + 1) % size][(y - 1) % size]) {
        nc++;
      }
      if (this.cells[(((x - 1) % size) + size) % size][y]) {
        nc++;
      }
      if (this.cells[(((x - 1) % size) + size) % size][(((y - 1) % size) + size) % size]) {
        nc++;
      }
      if (this.cells[(((x - 1) % size) + size) % size][(y + 1) % size]) {
        nc++;
      }
      return nc;
    };

    return GameOfLife;

  })();

  window.onload = function() {
    var gol;
    gol = new GameOfLife();
    setInterval.call(gol, gol.iterate, 100);
  };

}).call(this);
